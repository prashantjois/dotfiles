#!/bin/bash

export TERM=xterm-256color
export EDITOR=vim
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history

alias which='type -a'
alias g='grep -ERI'
# open vim in tab mode
alias vi='vim -p'

# navigation helpers
alias ..='cd ..'
alias ...='cd ...'
alias ....='cd ....'

# docker aliases
alias d='docker'
alias drm='docker rm'
alias drmi='docker rmi'
alias drma='docker ps -aq | xargs docker rm'
alias drmin="docker images | grep '<none>' | awk '{ print \$3 }' | grep -v IMAGE | xargs docker rmi"
de() {
    docker exec -ti $* bash
}


# git aliases
alias gs='git status'
alias gd='git diff'
alias gc='git commit -m'
alias ga='git add'
alias gco='git checkout'
alias gb='git branch'
alias gbcur="git status 2>&1 | head -n 1 | sed s'/On branch //g'"
alias gp="git push origin `git status 2>&1 | head -n 1 | sed s'/On branch //g'`"
alias gr="git pull origin `git status 2>&1 | head -n 1 | sed s'/On branch //g'`"
gcob() {
    local _branch=$1

    local _count=$(git branch | grep "$_branch" | wc -l)
    if [[ $_count -eq 0 ]]; then
        echo "branch not found"
    elif [[ $_count -gt 1 ]]; then
        echo "found multiple branches that match"
        git branch | grep "$_branch"
    else
        local _full_branch=$(git branch | grep "$_branch")
        echo "git checkout ${_full_branch:1}"
        git checkout ${_full_branch:1}
        git status 2>&1 | head -n 1
    fi
}

alias gco='git checkout'
# rails 
alias s='rails s -b 0.0.0.0'
alias mig='rake db:migrate'
alias migt='rake db:migrate RAILS_ENV=test'

back() {
    local _steps=${1:-1}
    rake db:rollback STEP=$_steps
}

backt() {
    local _steps=${1:-1}
    rake db:rollback RAILS_ENV=test STEP=$_steps
}

extract () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1        ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xf $1        ;;
             *.tbz2)      tar xjf $1      ;;
             *.tgz)       tar xzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

up() {
     local _levels=$1
     if [ ! -z "$_levels" ] && [ $_levels -gt 0 ] && [ $_levels -lt 1000 ]
     then
          local _cmd=".."
          for (( i=1 ; i<$_levels ; i++ ))
          do
               _cmd="$_cmd/.."
          done
          cd $_cmd
     fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketgz() { 
     if [ ! -z "$1" ]
     then
          tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
     fi
}

# Create a ZIP archive of a file or folder.
function makezip() { 
     if [ ! -z "$1" ]
     then
          zip -r "${1%%/}.zip" "$1" ; 
     fi
}

function merge() { 
    str=
    while read line; do str="$str $line"; done
    echo $str
}

